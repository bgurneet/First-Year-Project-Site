LAB 3 ARCHITECTURE

B part3 ; part1 or part2 or part3

buffer	DEFS 100,0

s1	DEFB "one\0"
ALIGN
s2	DEFB "two\0"
ALIGN
s3	DEFB "three\0"
ALIGN
s4	DEFB "four\0"
ALIGN
s5	DEFB "five\0"
ALIGN
s6	DEFB "six\0"
ALIGN
s7	DEFB "seven\0"
ALIGN
s8	DEFB "twentytwo\0"
ALIGN
s9	DEFB "twenty\0"
ALIGN

;************************** part 1 **************************
printstring
;MOV  R0,R1	; given
;SVC  3		; given
; your code goes here, replacing the previous 2 lines
loop    LDRB  R0,[R1],#1
CMP   R0, #0
BEQ   skip
SVC   0
B     loop

skip	MOV  R0, #10	; given - output end-of-line
SVC  0		; given
MOV  PC, LR	; given

;************************** part 2 ***************************
strcat
; your code goes here

start   LDRB R0,[R1],#1
      CMP  R0,#0
BNE  start

SUB  R1,R1,#1  ;since post-indexed addressing mode is used
cat     LDRB R0,[R2],#1
      CMP  R0,#0
BEQ  skipcat
      STRB R0,[R1],#1
B    cat

skipcat	MOV  PC, LR

strcpy
; your code goes here
cpy     LDRB R0, [R2],#1
      CMP  R0, #0
BEQ  end
STRB R0, [R1],#1
B    cpy

end     MOV  PC, LR	; given


;************************** part 3 **************************
sorted	STR LR, return2	; given
; your code goes here
srt     LDRB R4, [R2],#1
LDRB R5, [R3],#1
CMP  R4, #0
BEQ  skipsrt
CMP  R5, #0
BEQ  skipsrt
CMP  R4, R5
BNE  skipsrt

B    srt

skipsrt CMP  R4, R5
      LDR  PC, return2 ; given
return2 DEFW 0		; given

;*********************** the various parts ********************
part1	ADR R1, s1
BL  printstring
ADR R1, s2
BL  printstring
ADR R1, s3
BL  printstring
ADR R1, s4
BL  printstring
ADR R1, s5
BL  printstring
ADR R1, s6
BL  printstring
ADR R1, s7
BL  printstring
ADR R1, s8
BL  printstring
ADR R1, s9
BL  printstring
SVC 2

part2	ADR R2, s1
ADR R1, buffer
BL  strcpy
ADR R1, buffer
BL  printstring
ADR R2, s2
ADR R1, buffer
BL  strcat
ADR R1, buffer
BL  printstring
ADR R2, s3
ADR R1, buffer
BL  strcat
ADR R1, buffer
BL  printstring
SVC 2

; used by part3
return4 DEFW 0,0
test2	STR LR, return4		; This mechanism will be improved later
STR R3, return4+4	; Assembler will evaluate addition
MOV R0, R2
SVC 3
BL  sorted
MOVLT R0, #'<'		; Three-way IF using conditions
MOVEQ R0, #'='
MOVGT R0, #'>'
SVC 0
LDR R0, return4+4
SVC 3
MOV R0, #10
SVC 0
LDR PC, return4

part3	ADR R2, s1
ADR R3, s2
BL  test2
ADR R2, s2
ADR R3, s3
BL  test2
ADR R2, s3
ADR R3, s4
BL  test2
ADR R2, s4
ADR R3, s5
BL  test2
ADR R2, s5
ADR R3, s6
BL  test2
ADR R2, s6
ADR R3, s7
BL  test2
ADR R2, s7
ADR R3, s8
BL  test2
ADR R2, s8
ADR R3, s9
BL  test2
ADR R2, s8
ADR R3, s8
BL  test2
SVC 2

------------------------------------------------------------------------------------
LAB 4 PART 1
; COMP15111 lab 4 - Template file

print_char	equ	0		; Define names to aid readability
stop		equ	2
print_str	equ	3
print_no	equ	4

cLF		equ	10		; Line-feed character


		ADR	SP, _stack	; set SP pointing to the end of our stack
		B	main

		DEFS	100		; this chunk of memory is for the stack
_stack					; This label is 'just after' the stack space


wasborn		DEFB	"This person was born on ",0
was		DEFB	"This person was ",0
on		DEFB	" on ",0
is		DEFB	"This person is ",0
today		DEFB	" today!",0
willbe		DEFB	"This person will be ",0
		ALIGN

pDay		  DEFW	23		;  pDay = 23    //or whatever is today's date
pMonth		DEFW	11		;  pMonth = 11  //or whatever is this month
pYear		  DEFW	2005	;  pYear = 2005 //or whatever is this year


; def printAgeHistory (bDay, bMonth, bYear)

; parameters
;  R0 = bDay (on entry, moved to R6 to allow SVC to output via R0)
;  R1 = bMonth
;  R2 = bYear
; local variables (callee-saved registers)
;  R4 = year
;  R5 = age
;  R6 = bDay - originally R0

printAgeHistory	STMFD SP!,	{R6,R5,R4,R2,R1,R0}		; callee saves three registers

		LDR	R6, [SP, #(6 + 2) * 4]	; Get parameters from stack
		LDR	R1, [SP, #(6 + 1) * 4]
		LDR	R2, [SP, #(6 + 0) * 4]

;   year = bYear + 1
		ADD	R4, R2, #1
;   age = 1;
		MOV	R5, #1

; print("This person was born on " + str(bDay) + "/" + str(bMonth) + "/" + str(bYear))
		ADRL	R0, wasborn
		SVC	print_str
		MOV	R0, R6
		SVC	print_no
		MOV	R0, #'/'
		SVC	print_char
		MOV	R0, R1
		SVC	print_no
		MOV	R0, #'/'
		SVC	print_char
		MOV	R0, R2
		SVC	print_no
		MOV	R0, #cLF
		SVC	print_char

; this code does: while year < pYear //{
loop1	LDR	R0, pYear
		CMP	R4, R0
		BHS	end1		; Years are unsigned
; for part 4, should be changed to:
; while year < pYear or
;				(year == pYear and bMonth < pMonth) or
;				(year == pYear and bMonth == pMonth and bDay < pDay):

;  print("This person was " + str(age) + " on " + str(bDay) + "/" + str(bMonth) + "/" + str(year))
		ADRL	R0, was
		SVC	print_str
		MOV	R0, R5
		SVC	print_no
		ADRL	R0, on
		SVC	print_str
		MOV	R0, R6
		SVC	print_no
		MOV	R0, #'/'
		SVC	print_char
		MOV	R0, R1
		SVC	print_no
		MOV	R0, #'/'
		SVC	print_char
		MOV	R0, R4
		SVC	print_no
		MOV	R0, #cLF
		SVC	print_char

		; year = year + 1
		ADD	R4, R4, #1
		; age = age + 1
		ADD	R5, R5, #1
		; //}
		B	loop1

end1
; this code does: if (bMonth == pMonth):
; for part 4, should be changed to:
; if (bMonth == pMonth and bDay == pDay):
		LDR	R0, pMonth
		CMP	R1, R0
		BNE	else1

; print("This person is " + str(age) + " today!")
		ADRL	R0, is
		SVC	print_str
		MOV	R0, R5
		SVC	print_no
		ADRL	R0, today
		SVC	print_str
		MOV	R0, #cLF
		SVC	print_char

; else
		B	end2
else1
; print("This person will be " + str(age) + " on " + str(bDay) + "/" + str(bMonth) + "/" + str(year))
		ADRL	R0, willbe
		SVC	print_str
		MOV	R0, R5
		SVC	print_no
		ADRL	R0, on
		SVC	print_str
		MOV	R0, R6
		SVC	print_no
		MOV	R0, #'/'
		SVC	print_char
		MOV	R0, R1
		SVC	print_no
		MOV	R0, #'/'
		SVC	print_char
		MOV	R0, R4
		SVC	print_no
		MOV	R0, #cLF
		SVC	print_char

; }// end of printAgeHistory
end2		LDMFD SP!,	{R6,R5,R4,R2,R1,R0}      ; Callee saved registers

		MOV	PC, LR

another		DEFB	"Another person",10,0
		ALIGN

; def main():
main
	LDR	R4, =&12345678		; Test value - not part of Java compilation
	MOV	R5, R4			; See later if these registers corrupted
	MOV	R6, R4

; printAgeHistory(pDay, pMonth, 2000)
		LDR	R0, pDay
		STMFD SP!,	{R0}			; Stack first parameter
		LDR	R0, pMonth
		STMFD SP!,	{R0}			; Stack second parameter
		MOV	R0, #2000
		STMFD SP!,	{R0}			; Stack third parameter
		BL	printAgeHistory
		LDMFD SP!,	{R0}		 		; Deallocate three 32-bit variables
	        LDMFD SP!,	{R0}
                LDMFD SP!,	{R0}

; print("Another person");
		ADRL	R0, another
		SVC	print_str

; printAgeHistory(13, 11, 2000)
		MOV	R0, #13
		STMFD SP!,	{R0}			; Stack first parameter
		MOV	R0, #11
		STR	R0, [SP, #-4]!		; An explicit coding of PUSH
		MOV	R0, #2000
		STMFD	SP!, {R0}		; The STore Multiple mnemonic for PUSH {R0}
		BL	printAgeHistory
		LDMFD SP!,	{R0}		 		; Deallocate three 32-bit variables
	        LDMFD SP!,	{R0}
                LDMFD SP!,	{R0}

	; Now check to see if register values intact (Not part of Java)
	LDR	R0, =&12345678		; Test value
	CMP	R4, R0			; Did you preserve these registers?
	CMPEQ	R5, R0			;
	CMPEQ	R6, R0			;

	ADRLNE	R0, whoops1		; Oh dear!
	SVCNE	print_str		;

	ADRL	R0, _stack		; Have you balanced pushes & pops?
	CMP	SP, R0			;

	ADRLNE	R0, whoops2		; Oh no!!
	SVCNE	print_str		; End of test code

; }// end of main
		SVC	stop


whoops1		DEFB	"\n** BUT YOU CORRUPTED REGISTERS!  **\n", 0
whoops2		DEFB	"\n** BUT YOUR STACK DIDN'T BALANCE!  **\n", 0

----------------------------------------------------------------------------------
LAB 4 PART 4 
; COMP15111 lab 4 - Template file

print_char	equ	0		; Define names to aid readability
stop		equ	2
print_str	equ	3
print_no	equ	4

cLF		equ	10		; Line-feed character


		ADR	SP, _stack	; set SP pointing to the end of our stack
		B	main

		DEFS	100		; this chunk of memory is for the stack
_stack					; This label is 'just after' the stack space


wasborn		DEFB	"This person was born on ",0
was		DEFB	"This person was ",0
on		DEFB	" on ",0
is		DEFB	"This person is ",0
today		DEFB	" today!",0
willbe		DEFB	"This person will be ",0
		ALIGN

pDay		  DEFW	23		;  pDay = 23    //or whatever is today's date
pMonth		  DEFW	11		;  pMonth = 11  //or whatever is this month
pYear		  DEFW	2005	;  pYear = 2005 //or whatever is this year


; def printAgeHistory (bDay, bMonth, bYear)

; parameters
;  R0 = bDay (on entry, moved to R6 to allow SVC to output via R0)
;  R1 = bMonth
;  R2 = bYear
; local variables (callee-saved registers)
;  R4 = year
;  R5 = age
;  R6 = bDay - originally R0

;prints the date
printTheDate    STMFD SP!,	{R0}

		MOV	R0, R6
		SVC	print_no
		MOV	R0, #'/'
		SVC	print_char
		MOV	R0, R1
		SVC	print_no
		MOV	R0, #'/'
		SVC	print_char
		MOV	R0, R4
		SVC	print_no
		MOV	R0, #cLF
		SVC	print_char

		LDMFD SP!,	{R0}
		MOV	PC, LR


printAgeHistory	STMFD SP!,	{R6, R5, R4, R0}		; callee saves three registers
		MOV    R6, R0


;   age = 1;
		MOV	R5, #1
                MOV     R6, R3
; print("This person was born on " + str(bDay) + "/" + str(bMonth) + "/" + str(bYear))
		ADRL	R0, wasborn
		SVC	print_str
		MOV     R4, R2
		PUSH    {LR}
		BL      printTheDate
		POP     {LR}
;   year = bYear + 1
		ADD	R4, R2, #1

; this code does: while year < pYear //{
loop1	        LDR	R0, pYear
		CMP	R4, R0
		BGT     end1
		BLT     end3
		LDR     R0, pMonth
		CMP     R1, R0
		BGT     end1
		BLT     end3
		LDR     R0, pDay
		CMP     R6, R0
		BGE     end1

end3
; for part 4, should be changed to:
; while year < pYear or
;				(year == pYear and bMonth < pMonth) or
;				(year == pYear and bMonth == pMonth and bDay < pDay):

;  print("This person was " + str(age) + " on " + str(bDay) + "/" + str(bMonth) + "/" + str(year))
		ADRL	R0, was
		SVC	print_str
		MOV	R0, R5
		SVC	print_no
		ADRL	R0, on
		SVC	print_str
		PUSH    {LR}
		BL      printTheDate
		POP     {LR}


		; year = year + 1
		ADD	R4, R4, #1
		; age = age + 1
		ADD	R5, R5, #1
		; //}
		B	loop1

end1
; this code does: if (bMonth == pMonth):
; for part 4, should be changed to:
; if (bMonth == pMonth and bDay == pDay):
		LDR	R0, pMonth
		CMP	R1, R0
		BNE	else1
		LDR     R0, pDay
		CMP     R6, R0
		BNE     else1

; print("This person is " + str(age) + " today!")
		ADRL	R0, is
		SVC	print_str
		MOV	R0, R5
		SVC	print_no
		ADRL	R0, today
		SVC	print_str
		MOV	R0, #cLF
		SVC	print_char

; else
		B	end2
else1
; print("This person will be " + str(age) + " on " + str(bDay) + "/" + str(bMonth) + "/" + str(year))
		ADRL	R0, willbe
		SVC	print_str
		MOV	R0, R5
		SVC	print_no
		ADRL	R0, on
		SVC	print_str
		PUSH    {LR}
		BL      printTheDate
		POP     {LR}


; }// end of printAgeHistory
end2		LDMFD SP!,	{R6, R5, R4, R0}      ; Callee saved registers

		MOV	PC, LR

another		DEFB	"Another person",10,0
		ALIGN

; def main():
main
	LDR	R4, =&12345678		; Test value - not part of Java compilation
	MOV	R5, R4			; See later if these registers corrupted
	MOV	R6, R4

; printAgeHistory(pDay, pMonth, 2000)

                 LDR    R3, pDay
		 LDR    R1, pMonth
		 MOV    R2, #2000

		BL	printAgeHistory


; print("Another person");
		ADRL	R0, another
		SVC	print_str

; printAgeHistory(13, 11, 2000)

		 MOV	R3, #13
		 MOV    R1, #11
		 MOV    R2, #2000

		BL	printAgeHistory

	; Now check to see if register values intact (Not part of Java)
	LDR	R0, =&12345678		; Test value
	CMP	R4, R0			; Did you preserve these registers?
	CMPEQ	R5, R0			;
	CMPEQ	R6, R0			;

	ADRLNE	R0, whoops1		; Oh dear!
	SVCNE	print_str		;

	ADRL	R0, _stack		; Have you balanced pushes & pops?
	CMP	SP, R0			;

	ADRLNE	R0, whoops2		; Oh no!!
	SVCNE	print_str		; End of test code

; }// end of main
		SVC	stop


whoops1		DEFB	"\n** BUT YOU CORRUPTED REGISTERS!  **\n", 0
whoops2		DEFB	"\n** BUT YOUR STACK DIDN'T BALANCE!  **\n", 0
